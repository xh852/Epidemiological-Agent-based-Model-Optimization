

% python optimization_time.py basic_sim.py 100 10000 0.03 0.3 7 0.3

-------------------------------------------------- 
Timing Original Method
Timer unit: 1e-06 s

Total time: 282.592 s
File: /Users/czhen/Documents/GitHub/Epidemiological-Agent-based-Model-Optimization/basic_sim.py
Function: main at line 9

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     9                                           def main(duration, num_agents, infection_distance, infection_probability, minimum_infection_duration, recovery_probability, profile=False):
    10                                               # Initialize random seed
    11         1         16.0     16.0      0.0      random.seed(42)   
    12                                               
    13                                               # Initialize the list of agents
    14         1      12315.0  12315.0      0.0      agents = [Agent("S", (random.random(), random.random())) for _ in range(num_agents)]
    15                                           
    16                                               # Set one agent as patient zero
    17         1          2.0      2.0      0.0      agents[0].status = "I"
    18                                           
    19                                               # Initialize status counts
    20         1          2.0      2.0      0.0      status_counts = {"S": [], "I": [], "R": []}
    21                                           
    22                                           
    23                                               # Run simulation for given duration
    24       101         89.0      0.9      0.0      for _ in range(duration):
    25                                                   # Update status counts for current day
    26       400        276.0      0.7      0.0          for status in ["S", "I", "R"]:
    27       300     326155.0   1087.2      0.1              count = sum(1 for agent in agents if agent.status == status)
    28       300        397.0      1.3      0.0              status_counts[status].append(count)
    29                                           
    30                                                   # Update agent days with status and locations
    31   1000100     463364.0      0.5      0.2          for agent in agents:
    32   1000000     770469.0      0.8      0.3              agent.increase_days_with_status()
    33   1000000     464459.0      0.5      0.2              max_distance = 0.01
    34   1000000    1824356.0      1.8      0.6              new_location = generate_random_location(agent.location, max_distance)
    35   1000000    1019553.0      1.0      0.4              new_location = snap_to_edge(new_location, 0, 0, 1, 1)
    36   1000000     505493.0      0.5      0.2              agent.location = new_location
    37                                           
    38                                                   # Infect agents
    39       100  276962804.0 2769628.0     98.0          infect(agents, infection_distance, infection_probability)
    40                                           
    41                                                   # Recover agents
    42       100     177957.0   1779.6      0.1          recover(agents, minimum_infection_duration, recovery_probability)
    43                                           
    44                                               # Add final day status counts
    45         4          3.0      0.8      0.0      for status in ["S", "I", "R"]:
    46         3       3209.0   1069.7      0.0          count = sum(1 for agent in agents if agent.status == status)
    47         3          1.0      0.3      0.0          status_counts[status].append(count)
    48                                           
    49                                               # Plot status counts over time
    50         1        891.0    891.0      0.0      plt.plot(status_counts["S"], label="Susceptible")
    51         1        417.0    417.0      0.0      plt.plot(status_counts["I"], label="Infected")
    52         1        645.0    645.0      0.0      plt.plot(status_counts["R"], label="Recovered")
    53         1         67.0     67.0      0.0      plt.xlabel("Day")
    54         1         46.0     46.0      0.0      plt.ylabel("Number of Agents")
    55         1        187.0    187.0      0.0      plt.title("Agent-based Simulation")
    56         1       3990.0   3990.0      0.0      plt.legend()
    57         1      54888.0  54888.0      0.0      plt.savefig("plot_basic_sim_{}_{}_{}_{}_{}_{}.png".format(duration, num_agents, infection_distance, infection_probability, minimum_infection_duration, recovery_probability))
    58                                           
    59                                               # line_profiler
    60         1          2.0      2.0      0.0      import line_profiler
    61         1          1.0      1.0      0.0      if profile:
    62                                                   profiler = line_profiler.LineProfiler(main)
    63                                                   profiler.enable()
    64         1          1.0      1.0      0.0          main(duration, num_agents, infection_distance, infection_probability, minimum_infection_duration, recovery_probability)
    65                                                   profiler.disable()
    66                                                   profiler.print_stats()


-------------------------------------------------- 
Timing Optimization Method: Vectorization
Timer unit: 1e-06 s

Total time: 14.0311 s
File: /Users/czhen/Documents/GitHub/Epidemiological-Agent-based-Model-Optimization/opt_vectorization/basic_sim.py
Function: main at line 10

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    10                                           def main(duration, num_agents, infection_distance, infection_probability, minimum_infection_duration, recovery_probability, profile=False):
    11                                               # Initialize random seed
    12         1         15.0     15.0      0.0      random.seed(42)   
    13                                               
    14                                               # Initialize the list of agents
    15         1      12409.0  12409.0      0.1      agents = [Agent("S", (random.random(), random.random())) for _ in range(num_agents)]
    16                                               
    17                                               # Set one agent as patient zero
    18         1          1.0      1.0      0.0      agents[0].status = "I"
    19                                           
    20                                               # Initialize status counts
    21         1          9.0      9.0      0.0      status_counts = {"S": np.zeros(duration+1), "I": np.zeros(duration+1), "R": np.zeros(duration+1)}
    22                                           
    23       101        110.0      1.1      0.0      for day in range(duration):
    24                                                   # Update status counts for current day
    25       100     122731.0   1227.3      0.9          status_counts["S"][day] = np.count_nonzero([agent.status == "S" for agent in agents])
    26       100     121748.0   1217.5      0.9          status_counts["I"][day] = np.count_nonzero([agent.status == "I" for agent in agents])
    27       100     119998.0   1200.0      0.9          status_counts["R"][day] = np.count_nonzero([agent.status == "R" for agent in agents])
    28                                           
    29                                                   # Update agent days with status and locations
    30       100         73.0      0.7      0.0          max_distance = 0.01
    31   1000100     644797.0      0.6      4.6          for agent in agents:
    32   1000000     972576.0      1.0      6.9              agent.increase_days_with_status()
    33   1000000    2073959.0      2.1     14.8              new_location = generate_random_location(agent.location, max_distance)
    34   1000000    1229840.0      1.2      8.8              new_location = snap_to_edge(new_location, 0, 0, 1, 1)
    35   1000000     687554.0      0.7      4.9              agent.location = new_location
    36                                           
    37                                                   # Infect agents
    38       100    7802660.0  78026.6     55.6          infect(agents, infection_distance, infection_probability)
    39                                           
    40                                                   # Recover agents
    41       100     178076.0   1780.8      1.3          recover(agents, minimum_infection_duration, recovery_probability)
    42                                           
    43                                               # Update status counts for last day
    44         1       1229.0   1229.0      0.0      status_counts["S"][duration] = np.count_nonzero([agent.status == "S" for agent in agents])
    45         1       1207.0   1207.0      0.0      status_counts["I"][duration] = np.count_nonzero([agent.status == "I" for agent in agents])
    46         1       1155.0   1155.0      0.0      status_counts["R"][duration] = np.count_nonzero([agent.status == "R" for agent in agents])
    47                                           
    48                                               # Plot status counts over time
    49         1        773.0    773.0      0.0      plt.plot(status_counts["S"], label="Susceptible")
    50         1        430.0    430.0      0.0      plt.plot(status_counts["I"], label="Infected")
    51         1        385.0    385.0      0.0      plt.plot(status_counts["R"], label="Recovered")
    52         1         58.0     58.0      0.0      plt.xlabel("Day")
    53         1         43.0     43.0      0.0      plt.ylabel("Number of Agents")
    54         1        172.0    172.0      0.0      plt.title("Agent-based Simulation")
    55         1       4271.0   4271.0      0.0      plt.legend()
    56         1      54802.0  54802.0      0.4      plt.savefig("plot_basic_sim_optvec_{}_{}_{}_{}_{}_{}.png".format(duration, num_agents, infection_distance, infection_probability, minimum_infection_duration, recovery_probability))
    57                                           
    58                                               # line_profiler
    59         1          2.0      2.0      0.0      import line_profiler
    60         1          0.0      0.0      0.0      if profile:
    61                                                   profiler = line_profiler.LineProfiler(main)
    62                                                   profiler.enable()
    63         1          1.0      1.0      0.0          main(duration, num_agents, infection_distance, infection_probability, minimum_infection_duration, recovery_probability)
    64                                                   profiler.disable()
    65                                                   profiler.print_stats()